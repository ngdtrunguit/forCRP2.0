name: 'TF-AKS'

on:
  # push:
  #   branches: [ "main" ]
  pull_request:
  #manual trigger
  workflow_dispatch:

env: 
  ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID:  ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
  
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    
    # Replace variables 
    - name: Replace Variables in terraform.tfvars
      uses: datamonsters/replace-action@v2
      with:
        files: TF-aks/terraform.tfvars
        replacements: __subscriptionid__=${{ env.ARM_SUBSCRIPTION_ID }},__tenant_id__=${{ env.ARM_TENANT_ID }},__client_id__=${{ env.ARM_CLIENT_ID }}',__client_secret__=${{ env.ARM_CLIENT_SECRET }}'
    
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
             -backend-config="subscription_id=$ARM_SUBSCRIPTION_ID"
             -backend-config="tenant_id=$ARM_TENANT_ID"
             -backend-config="client_id=$ARM_CLIENT_ID"
             -backend-config="client_secret=$ARM_CLIENT_SECRET"
      working-directory: TF-aks

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      continue-on-error: true
      working-directory: TF-aks

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -out out.plan -var-file="terraform.tfvars"
      working-directory: TF-aks

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      #if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform apply -auto-approve out.plan
      working-directory: TF-aks

    #- name: Terraform Destroy
    #  #if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
    #  run: terraform destroy -auto-approve
    #  working-directory: TF-aks
