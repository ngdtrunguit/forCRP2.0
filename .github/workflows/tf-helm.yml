name: 'TF-helm-app'

on:
  # push:
  #   branches: [ "main" ]
  pull_request:
  workflow_dispatch:

env: 
  ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID:  ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
  AKS_RESOURCE_GROUP: ${{ secrets.AKS_RESOURCE_GROUP }}
  AKS_NAME: ${{ secrets.AKS_NAME }}
  
  
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Replace variables 
    - name: Replace Variables in terraform.tfvars
      uses: datamonsters/replace-action@v2
      with:
        files: TF-helm/terraform.tfvars
        replacements: __subscriptionid__=${{ env.ARM_SUBSCRIPTION_ID }},__tenant_id__=${{ env.ARM_TENANT_ID }},__client_id__=${{ env.ARM_CLIENT_ID }}',__client_secret__=${{ env.ARM_CLIENT_SECRET }}'
    
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    # Install helm, kubectl, argocd, argo rollouts
    - name: Helm tool installer
      uses: Azure/setup-helm@v3
      id: installhelm

    - name: Kubectl tool installer
      uses: Azure/setup-kubectl@v3
      id: installkubectl

    - name: install argo rollouts
      run: |
        curl -LO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-darwin-amd64
        chmod +x ./kubectl-argo-rollouts-darwin-amd64
        sudo mv ./kubectl-argo-rollouts-darwin-amd64 /usr/local/bin/kubectl-argo-rollouts
      id: installargorollout

    - name: install argocd cli
      run: |
        curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
        rm argocd-linux-amd64

    # Login to Azure
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Connect to AKS
      uses: Azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.AKS_NAME }}
        resource-group: ${{ env.AKS_RESOURCE_GROUP }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
             -backend-config="subscription_id=$ARM_SUBSCRIPTION_ID"
             -backend-config="tenant_id=$ARM_TENANT_ID"
             -backend-config="client_id=$ARM_CLIENT_ID"
             -backend-config="client_secret=$ARM_CLIENT_SECRET"
      working-directory: TF-helm

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      continue-on-error: true
      working-directory: TF-helm

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -out out.plan -var-file="terraform.tfvars"
      working-directory: TF-helm

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      #if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform apply -auto-approve out.plan
      working-directory: TF-helm

   -  name: Terraform Destroy
      #if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform destroy -auto-approve
      working-directory: TF-helm
